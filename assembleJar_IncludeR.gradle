/**方案1：打包jar（将R文件也打包在内） 【推荐】
 * 处理R文件：
 * 1.将Android下的所有R文件的映射地址更换
 *
 * 2.将本Modules生成的R文件 打包成jar
 */
def properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def sdkPath = properties.getProperty('sdk.dir', null)
def androidSdkPath29 = sdkPath + "/platforms/android-29/android.jar"

String jarName //
String oldRString // "R\\." //R文件中，被替换的文本
String newRString//"com.zqy.google.android.support.R."  //R文件中，替换后的文本--android.support

/**
 * 清除临时目录
 */
task clearClasss(type: Delete) {
    doFirst {
        println '清除源码临时目录'
    }
    delete 'build/tempsrc'
    delete 'build/android_r_tempsrc'//androidR文件临时目录
    delete 'build/project_r_tempsrc'//项目R文件临时目录
    delete 'build/tempsrc_all'//项目R文件临时目录
    delete 'build/gen_classs'
}

/**
 * 拷贝源码到'build/tempsrc'
 */
task copyClasss(type: Copy) {
    doFirst {
        println('拷贝源码到\'build/tempsrc\'')
    }
    from "src/main/java/com"
    into 'build/tempsrc/com'
}
/**
 * 拷贝androidR文件到'build/android_r_tempsrc'
 */
task copyAndroidR(type: Copy) {
    doFirst {
        println('拷贝androidR文件到\'build/android_r_tempsrc\'')
    }
    from "src/main/java/android"
    into 'build/android_r_tempsrc/android'
}

/** 拷贝项目R文件到'build/project_r_tempsrc'
 * 1.执行assemble，生成R文件
 * 2.复制Modules生成的R文件
 */
task copyProjectR(type: Copy) {
    doFirst {
        println('拷贝项目R文件到\'build/project_r_tempsrc\'')
    }
    String baseDir = 'build/generated/not_namespaced_r_class_sources/'
    String debugDir = baseDir + 'debug/generateDebugRFile/out'
    String releaseDir = baseDir + 'release/generateReleaseRFile/out'

    if (file(releaseDir).exists()) {
        from(releaseDir)
        into 'build/project_r_tempsrc'
    } else {
        from(debugDir)
        into 'build/project_r_tempsrc'
    }
}

/**
 * 拷贝所有文件到'build/tempsrc_all'
 */
task copyAll(type: Copy) {
    doFirst {
        println('拷贝所有文件到\'build/tempsrc_all\'')
    }
    from 'build/tempsrc'
    from 'build/android_r_tempsrc'//androidR文件临时目录
    from 'build/project_r_tempsrc'//项目R文件临时目录
    into 'build/tempsrc_all'
}

/**将android下的R文件中的R.xx.xx替换为 com.zqy.google.android.support.R.xx.xx
 * 预处理android下的R文件
 */
task replaceAndroidR() {
    doLast {
        println '预处理android下的R文件'
        // 递归遍历目录下的所有java文件，然后针对资源id做打java包前的预处理
        def currentDir = file('build/android_r_tempsrc')
        if (currentDir.exists())
            currentDir.eachFileRecurse { file ->
                if (file.exists() && file.name == 'R.java') {
                    def fileText = file.getText('utf-8')
                    if (oldRString != null && oldRString != "")
                        fileText = fileText.replaceAll(oldRString, newRString)

                    file.write(fileText, 'utf-8')
                }

            }
    }
}

/**
 * 编译class
 */
task javaToClass(type: JavaCompile) {
    doFirst {
        println '编译class'
    }
    options.encoding = 'UTF-8'
    source = fileTree(dir: 'build/tempsrc_all/')
    destinationDir = file('build/gen_classs')
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'
    def dependenciesJars = []
    dependenciesJars.add(androidSdkPath29)
    classpath = files(dependenciesJars)

}
/**
 * 将class文件打包成jar
 */
task classToRJar(type: Jar) {
    doFirst {
        println '将class文件打包成jar'
        from 'build/gen_classs/'
        into ''
        // 去掉不需要打包的目录和文件
        exclude 'BuildConfig.class'

        baseName jarName
    }
}

/**
 *
 * 获取json配置文件
 */
task getJson() {
    doFirst {
        println('读取json配置信息')
    }

    File fileP = file("build/json_config/assembleJarConfig.json")
    if (fileP.exists()) {
        String jsonString = fileP.getText('utf-8')
        def parsedJson = new groovy.json.JsonSlurper().parseText(jsonString)
        jarName = parsedJson.jarName
        oldRString = parsedJson.oldRString
        newRString = parsedJson.newRString
    }
}


task assemble_Jar() {
    //第二种方式：执行assemble，生成R文件 -》 复制Modules生成的R文件 -》所有R文件打包成jar
    assemble_Jar.dependsOn(classToRJar)
    classToRJar.dependsOn(javaToClass)
    javaToClass.dependsOn(copyAll)

    copyAll.dependsOn(replaceAndroidR)
    replaceAndroidR.dependsOn(copyProjectR)
    copyProjectR.dependsOn(copyAndroidR)
    copyAndroidR.dependsOn(copyClasss)
    copyClasss.dependsOn(assemble)
    assemble.dependsOn(clearClasss)
    clearClasss.dependsOn(getJson)
}




