/**
 * 方案2：打包jar（将R.xx.oo替换为com.zqy.google.android.ResourcesUtil.getLayoutId("oo")) 【备用】
 */
def timeStr = new Date().format('yyyyMMdd(HHmmss)')
def properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def sdkPath = properties.getProperty('sdk.dir', null)
def androidSdkPath29 = sdkPath + "/platforms/android-29/android.jar"
String jarName //
String styleableArryFunction //"com.zqy.google.android.StyleaUtils.getStyleableArryId"
String styleableFunction //"com.zqy.google.android.StyleaUtils.getStyleableId"
String styleFunction //"com.zqy.google.android.ResourcesUtil.getStyleId"
String idFunction //"com.zqy.google.android.ResourcesUtil.getId"
String layoutFunction // "com.zqy.google.android.ResourcesUtil.getLayoutId"
String mipmapFunction //"com.zqy.google.android.ResourcesUtil.getMipmap"
String drawableFunction//"com.zqy.google.android.ResourcesUtil.getDrawableId"
String stringFunction // "com.zqy.google.android.ResourcesUtil.getStringId"
String colorFunction // "com.zqy.google.android.ResourcesUtil.getColorId"
String animFunction // "com.zqy.google.android.ResourcesUtil.getAnimId"
String dimenFunction // "com.zqy.google.android.ResourcesUtil.getDimen"
String attrFunction // "com.zqy.google.android.ResourcesUtil.getAttr"
String boolFunction// "com.zqy.google.android.ResourcesUtil.getBool"
String integerFunction // "com.zqy.google.android.ResourcesUtil.getInteger"
String interpolatorFunction // "com.zqy.google.android.ResourcesUtil.getInterpolator"
String rawFunction //"com.zqy.google.android.ResourcesUtil.getRaw"
String xmlFunction //"com.zqy.google.android.ResourcesUtil.getXml"
String pluralsFunction // "com.zqy.google.android.ResourcesUtil.getPlurals"
String animatorFunction // "com.zqy.google.android.ResourcesUtil.getAnimator"
/**
 * 清除临时目录
 */
task clearClasss(type: Delete) {
    doFirst {
        println '清除源码临时目录'
    }
    delete 'build/tempsrc'
    delete 'build/gen_classs'

}

/**
 * 复制源码到临时目录
 */
task copyClasss(type: Copy) {
    doFirst {
        print('复制源码到临时目录')
    }
    from "src/main/java"
    into 'build/tempsrc'
}


/**
 * java编译为class
 */
task javaToClass(type: JavaCompile) {
    println 'java编译为class'
    options.encoding = 'UTF-8'
    source = fileTree(dir: 'build/tempsrc/')
    destinationDir = file('build/gen_classs/')
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'
    def dependenciesJars = []
    dependenciesJars.add(androidSdkPath29)
    classpath = files(dependenciesJars)
}
/**
 * 将class文件打包成jar
 */
task classToJar(type: Jar) {
    from 'build/gen_classs/'
    into ''
    // 去掉不需要打包的目录和文件
    exclude 'BuildConfig.class'
    jarName = "RToName_${timeStr}"
    baseName jarName
}

/**
 * 删除 import xx.xx.xx.R;
 */
task deleteImportR() {
    doLast {
        println '删除 import xx.xx.xx.R;'
        // 递归遍历目录下的所有java文件，然后针对资源id做打java包前的预处理
        def currentDir = file('build/tempsrc')
        if (currentDir.exists())
            currentDir.eachFileRecurse { file ->
                if (file.exists() && file.name != "R.java" && file.name.endsWith(".java")) {
                    String fileText = file.getText('utf-8')
                    List<String> list = new ArrayList<String>()
                    fileText.eachLine { line ->
                        String content = line.trim()
                        if (content.startsWith("import") && content.endsWith("R;")) {
                            println '包含import文件:' + file.name
                        } else {
                            list.add(line)
                        }

                    }
                    String join = String.join("\n", list)
                    file.write(join, 'utf-8')
                }
            }
    }

}

/**
 * 预处理（将R.xx.*替换成通过name的方式获取）
 */
task replaceName() {
    doLast {
        println '预处理（将R.xx.*替换成通过name的方式获取）'
        // 递归遍历目录下的所有java文件，然后针对资源id做打java包前的预处理
        def currentDir = file('build/tempsrc')
        if (currentDir.exists())
            currentDir.eachFileRecurse { file ->
                if (file.exists() && file.name.endsWith(".java")) {
                    String fileText = file.getText('utf-8')
                    List<String> list = new ArrayList<String>()
                    fileText.eachLine { line ->
                        String content = line
                        list.add(content)
                    }

                    String androidR = "android.R."
                    String styleable = "R.styleable."
                    String style = "R.style."
                    String id = "R.id."
                    String layout = "R.layout."
                    String mipmap = "R.mipmap."
                    String drawable = "R.drawable."
                    String string = "R.string."
                    String color = "R.color."
                    String anim = "R.anim."
                    String dimen = "R.dimen."
                    String attr = "R.attr."
                    String bool = "R.bool."
                    String integer = "R.integer."
                    String interpolator = "R.interpolator."
                    String raw = "R.raw."
                    String xml = "R.xml."
                    String plurals = "R.plurals."
                    String animator = "R.animator."

                    for (int i = 0; i < list.size(); i++) {
                        String str = list.get(i)//该行原本字符
                        String newLineString //该行新字符
                        if (str.contains(androidR)) {
                            newLineString = ""
                        } else if (str.contains(styleable)) {
                            //println i + '行文本修改前内容：' + str
                            newLineString = replaceResourcesStyleableID(str, styleable, styleableArryFunction, styleableFunction)
//                    println '该行原字符：' + str
//                    println '该行新字符：' + newLineString
                        } else if (str.contains(style)) {
                            newLineString = replaceResourcesID(str, style, styleFunction)
                        } else if (str.contains(id)) {
                            newLineString = replaceResourcesID(str, id, idFunction)
                        } else if (str.contains(layout)) {
                            newLineString = replaceResourcesID(str, layout, layoutFunction)
                        } else if (str.contains(mipmap)) {
                            newLineString = replaceResourcesID(str, mipmap, mipmapFunction)
                        } else if (str.contains(drawable)) {
                            newLineString = replaceResourcesID(str, drawable, drawableFunction)
                        } else if (str.contains(string)) {
                            newLineString = replaceResourcesID(str, string, stringFunction)
                        } else if (str.contains(color)) {
                            newLineString = replaceResourcesID(str, color, colorFunction)
                        } else if (str.contains(anim)) {
                            newLineString = replaceResourcesID(str, anim, animFunction)
                        } else if (str.contains(dimen)) {
                            newLineString = replaceResourcesID(str, dimen, dimenFunction)
                        } else if (str.contains(attr)) {
                            newLineString = replaceResourcesID(str, attr, attrFunction)
                        } else if (str.contains(bool)) {
                            newLineString = replaceResourcesID(str, bool, boolFunction)
                        } else if (str.contains(integer)) {
                            newLineString = replaceResourcesID(str, integer, integerFunction)
                        } else if (str.contains(interpolator)) {
                            newLineString = replaceResourcesID(str, interpolator, interpolatorFunction)
                        } else if (str.contains(raw)) {
                            newLineString = replaceResourcesID(str, raw, rawFunction)
                        } else if (str.contains(xml)) {
                            newLineString = replaceResourcesID(str, xml, xmlFunction)
                        } else if (str.contains(plurals)) {
                            newLineString = replaceResourcesID(str, plurals, pluralsFunction)
                        } else if (str.contains(animator)) {
                            newLineString = replaceResourcesID(str, animator, animatorFunction)
                        }

                        if (newLineString != null && newLineString != "") {

                            list.set(i, newLineString)
                            i--
                        }

                    }
                    String join = String.join("\n", list)
                    file.write(join, 'utf-8')
                }
            }
    }

}
/**styleable资源id特殊处理
 *
 * @param startString 被替换的字符开始符号 比如：R.layout.
 * @param endString 被替换的字符结尾符号
 * @param newStringPrefix 新内容 前缀
 * @return
 */
String replaceResourcesStyleableID(src, startString, styleableArryFunction, styleableFunction) {
//无需指定参数类型
    if (startString.contains("styleable")) {
        println 'src:' + src + '--startString:' + startString
        String endString0 = ","
        String endString1 = ")"
        String endString2 = ";"
        int startIndexOf = src.indexOf(startString)//R.xx.xx的位置
        def substring = src.substring(startIndexOf, src.length())//从R.xx.xx的位置到最后的字符
        List<Integer> list = new ArrayList<>()
        list.add(substring.indexOf(endString0))
        list.add(substring.indexOf(endString1))
        list.add(substring.indexOf(endString2))
        for (int i = 0; i < list.size(); i++) {
            Integer index = list.get(i)
            if (index <= 0) {
                list.remove(i)
                i--
            }
        }
        //资源路劲全称，比如：R.styleable.aa
        println 'src:' + src + '--startString:' + startString + '--位置:' + list.toString()

        int endIndexOf
        if (list.size() >= 3) {
            endIndexOf = Math.min(list.get(0), Math.min(list.get(1), list.get(2)))
        } else if (list.size() >= 2) {
            endIndexOf = Math.min(list.get(0), list.get(1))
        } else if (list.size() >= 1) {
            endIndexOf = list.get(0)
        }
        println 'endIndexOf:' + endIndexOf
        if (endIndexOf <= 0) {
            //表示该行没有")"和";"，原字符返回
            return ""
        } else {
            //这儿得加上R.xx.xx的位置
            String resourcesID = src.substring(startIndexOf, startIndexOf + endIndexOf)
            //资源名，比如：aa
            String resourcesName = resourcesID.substring(startString.length(), resourcesID.length())
            String newString = ""
            if (!resourcesName.contains("_")) {
                //资源名不含有“_”是资源集 -- int[]
                newString = styleableArryFunction + "(\"" + resourcesName + "\")"
            } else {
                newString = styleableFunction + "(\"" + resourcesName + "\")"
            }

            return src.replace(resourcesID, newString)
        }

    }
    return ""
}

/**一般资源id处理
 *
 * @param startString 被替换的字符开始符号 比如：R.layout.
 * @param endString 被替换的字符结尾符号
 * @param newStringPrefix 新内容 前缀
 * @return
 */
String replaceResourcesID(src, startString, newStringPrefix) {//无需指定参数类型
    println 'src:' + src + '--startString:' + startString + '--newStringPrefix:' + newStringPrefix
    int endIndexOf = getEndIndexOf(src, startString)
    if (endIndexOf <= 0) {
        //表示该行没有")"和";"
        return ""
    } else {
        int startIndexOf = src.indexOf(startString)//R.xx.xx的位置
        String resourcesID = src.substring(startIndexOf, startIndexOf + endIndexOf)//这儿得加上R.xx.xx的位置
        //资源名，比如：aa
        String resourcesName = resourcesID.substring(startString.length(), resourcesID.length())
        if (startString.contains("style") && !startString.contains("styleable")) {
            //style资源特殊处理：比如Base_DialogWindowTitle_AppCompat换成Base.DialogWindowTitle.AppCompat
            //通过name查找资源id，需要原名字
            resourcesName = resourcesName.replaceAll("_", ".")
        }
        println '旧字符:' + resourcesID
        String newString = newStringPrefix + "(\"" + resourcesName + "\")"
        println '新字符:' + newString
        return src.replace(resourcesID, newString)
    }

}

/**获取R.xx.xx的结尾字符位置 比如：R.xx.xx,R.xx.xx)  R.xx.xx;
 *
 * @param src 原字符串
 * @param startString R.xx.
 * @return
 */
int getEndIndexOf(src, startString) {
    String endString0 = ","
    String endString1 = ")"
    String endString2 = ";"
    int startIndexOf = src.indexOf(startString)//R.xx.xx的位置
    def substring = src.substring(startIndexOf, src.length())//从R.xx.xx的位置到最后的字符
    List<Integer> list = new ArrayList<>()
    list.add(substring.indexOf(endString0))
    list.add(substring.indexOf(endString1))
    list.add(substring.indexOf(endString2))
    for (int i = 0; i < list.size(); i++) {
        Integer index = list.get(i)
        if (index <= 0) {
            list.remove(i)
            i--
        }
    }
    //资源路劲全称，比如：R.styleable.aa
    println 'src:' + src + '--startString:' + startString + '--位置:' + list.toString()
    int endIndexOf
    if (list.size() >= 3) {
        endIndexOf = Math.min(list.get(0), Math.min(list.get(1), list.get(2)))
    } else if (list.size() >= 2) {
        endIndexOf = Math.min(list.get(0), list.get(1))
    } else if (list.size() >= 1) {
        endIndexOf = list.get(0)
    }
    println 'endIndexOf:' + endIndexOf
    return endIndexOf
}

/**
 *
 * 获取json配置文件
 */
task getJson() {
    println('读取json配置信息')
    doLast {
        File fileP = file("build/json_config/assembleJarConfig.json")
        if (fileP.exists()) {
            String jsonString = fileP.getText('utf-8')
            def parsedJson = new groovy.json.JsonSlurper().parseText(jsonString)
            jarName = parsedJson.jarName
            styleableArryFunction = parsedJson.styleableArryFunction
            styleableFunction = parsedJson.styleableFunction
            styleFunction = parsedJson.styleFunction
            idFunction = parsedJson.idFunction
            layoutFunction = parsedJson.layoutFunction
            mipmapFunction = parsedJson.mipmapFunction
            drawableFunction = parsedJson.drawableFunction
            stringFunction = parsedJson.stringFunction
            colorFunction = parsedJson.colorFunction
            animFunction = parsedJson.animFunction
            dimenFunction = parsedJson.dimenFunction
            attrFunction = parsedJson.attrFunction
            boolFunction = parsedJson.boolFunction
            integerFunction = parsedJson.integerFunction
            interpolatorFunction = parsedJson.interpolatorFunction
            rawFunction = parsedJson.rawFunction
            xmlFunction = parsedJson.xmlFunction
            pluralsFunction = parsedJson.pluralsFunction
            animatorFunction = parsedJson.animatorFunction
        }
    }
}

/**
 * 打包jar
 */
task assemble_Jar() {
    assemble_Jar.dependsOn(classToJar)
    classToJar.dependsOn(javaToClass)
    javaToClass.dependsOn(replaceName)
    replaceName.dependsOn(deleteImportR)
    deleteImportR.dependsOn(copyClasss)
    copyClasss.dependsOn(clearClasss)
    clearClasss.dependsOn(getJson)
}

