apply plugin: 'com.android.library'
def timeStr = new Date().format('yyyyMMdd(HHmmss)')
def noProGuardJarName
def properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def sdkPath = properties.getProperty('sdk.dir', null)
def androidSdkPath29 = sdkPath + "/platforms/android-29/android.jar"
def rootDirPath = getRootDir().getPath()//获取项目根路劲
android {
    compileSdkVersion build_versions.target_sdk
    defaultConfig {
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    repositories {
        flatDir {
            dirs 'libs'
        }
    }

}

/**
 * 清除临时目录
 */
task clearSource(type: Delete) {
    doFirst {
        println '清除源码临时目录'
    }
    delete 'build/tempsrc'
    delete 'build/gen_classs'

}


task copyR(type: Copy) {

    from "../googlelib/src/main/java/androidx"
    into 'build/tempsrc/androidx'
}
/**
 * 预处理（替换R.xx.*之类）
 */
task assemble_ReplaceR(dependsOn: [clearSource, copyR]) {
    doLast {
        println '预备处理'
        // 递归遍历目录下的所有java文件，然后针对资源id做打java包前的预处理
        def currentDir = file('build/tempsrc/androidx')
        currentDir.eachFileRecurse { file ->
            if (!file.isFile() || !file.name.endsWith('.java')) return true // 相当于continue
            def fileText = file.getText('utf-8')
            List<String> list = new ArrayList<String>()
            fileText.eachLine { line ->
                String content = line
                list.add(content)
            }

            String styleable = "R.styleable."
            String style = "R.style."
            String id = "R.id."
            String layout = "R.layout."
            String mipmap = "R.mipmap."
            String drawable = "R.drawable."
            String string = "R.string."
            String color = "R.color."
            String anim = "R.anim."
            String dimen = "R.dimen."
            String attr = "R.attr."
            String bool = "R.bool."
            String integer = "R.integer."
            String interpolator = "R.interpolator."
            for (int i = 0; i < list.size(); i++) {
                String str = list.get(i)
                if (str.contains(styleable)) {
                    //println i + '行文本修改前内容：' + str
                    int startIndexOf = str.indexOf(styleable)
                    char charAt = str.charAt(startIndexOf - 1)
                    String newString
                    if (charAt == '(') {
                        newString = resourcesID(str, styleable, ")", "com.zqy.googlelib.StyleaUtils.getStyleableId")
                    } else {
                        newString = resourcesID(str, styleable, ";", "com.zqy.googlelib.StyleaUtils.getStyleableId")
                    }
                    if (newString != null && newString != "")
                        list.set(i, newString)
                    //有可能一行有多个
                    i--
                    // println i + '行文本修改后内容：' + newString
                } else if (str.contains(style)) {
                    int startIndexOf = str.indexOf(style)
                    char charAt = str.charAt(startIndexOf - 1)
                    String newString
                    if (charAt == '(') {
                        newString = resourcesID(str, style, ")", "com.zqy.googlelib.UtilResources.getStyleId")
                    } else {
                        newString = resourcesID(str, style, ";", "com.zqy.googlelib.UtilResources.getStyleId")
                    }
                    if (newString != null && newString != "")
                        list.set(i, newString)
                    i--
                } else if (str.contains(id)) {
                    int startIndexOf = str.indexOf(id)
                    char charAt = str.charAt(startIndexOf - 1)
                    String newString
                    if (charAt == '(') {
                        newString = resourcesID(str, id, ")", "com.zqy.googlelib.UtilResources.getId")
                    } else {
                        newString = resourcesID(str, id, ";", "com.zqy.googlelib.UtilResources.getId")
                    }
                    if (newString != null && newString != "")
                        list.set(i, newString)
                    i--
                } else if (str.contains(layout)) {
                    int startIndexOf = str.indexOf(layout)
                    char charAt = str.charAt(startIndexOf - 1)
                    String newString
                    if (charAt == '(') {
                        newString = resourcesID(str, layout, ")", "com.zqy.googlelib.UtilResources.getLayoutId")
                    } else {
                        newString = resourcesID(str, layout, ";", "com.zqy.googlelib.UtilResources.getLayoutId")
                    }
                    if (newString != null && newString != "")
                        list.set(i, newString)
                    i--
                } else if (str.contains(mipmap)) {
                    int startIndexOf = str.indexOf(mipmap)
                    char charAt = str.charAt(startIndexOf - 1)
                    String newString
                    if (charAt == '(') {
                        newString = resourcesID(str, mipmap, ")", "com.zqy.googlelib.UtilResources.getMipmap")
                    } else {
                        newString = resourcesID(str, mipmap, ";", "com.zqy.googlelib.UtilResources.getMipmap")
                    }
                    if (newString != null && newString != "")
                        list.set(i, newString)
                    i--
                } else if (str.contains(drawable)) {
                    int startIndexOf = str.indexOf(drawable)
                    char charAt = str.charAt(startIndexOf - 1)
                    String newString
                    if (charAt == '(') {
                        newString = resourcesID(str, drawable, ")", "com.zqy.googlelib.UtilResources.getDrawableId")
                    } else {
                        newString = resourcesID(str, drawable, ";", "com.zqy.googlelib.UtilResources.getDrawableId")
                    }
                    if (newString != null && newString != "")
                        list.set(i, newString)
                    i--
                } else if (str.contains(string)) {
                    int startIndexOf = str.indexOf(string)
                    char charAt = str.charAt(startIndexOf - 1)
                    String newString
                    if (charAt == '(') {
                        newString = resourcesID(str, string, ")", "com.zqy.googlelib.UtilResources.getStringId")
                    } else {
                        newString = resourcesID(str, string, ";", "com.zqy.googlelib.UtilResources.getStringId")
                    }
                    if (newString != null && newString != "")
                        list.set(i, newString)
                    i--
                } else if (str.contains(color)) {
                    int startIndexOf = str.indexOf(color)
                    char charAt = str.charAt(startIndexOf - 1)
                    String newString
                    if (charAt == '(') {
                        newString = resourcesID(str, color, ")", "com.zqy.googlelib.UtilResources.getColorId")
                    } else {
                        newString = resourcesID(str, color, ";", "com.zqy.googlelib.UtilResources.getColorId")
                    }
                    if (newString != null && newString != "")
                        list.set(i, newString)
                    i--
                } else if (str.contains(anim)) {
                    int startIndexOf = str.indexOf(anim)
                    char charAt = str.charAt(startIndexOf - 1)
                    println i + '行文本修改前内容：' + str
                    String newString
                    if (charAt == '(') {
                        newString = resourcesID(str, anim, ")", "com.zqy.googlelib.UtilResources.getAnimId")
                    } else {
                        newString = resourcesID(str, anim, ";", "com.zqy.googlelib.UtilResources.getAnimId")
                    }
                    println i + '行文本修改后内容：' + newString
                    if (newString != null && newString != "")
                        list.set(i, newString)
                    i--
                } else if (str.contains(dimen)) {
                    int startIndexOf = str.indexOf(dimen)
                    char charAt = str.charAt(startIndexOf - 1)
                    String newString
                    if (charAt == '(') {
                        newString = resourcesID(str, dimen, ")", "com.zqy.googlelib.UtilResources.getDimen")
                    } else {
                        newString = resourcesID(str, dimen, ";", "com.zqy.googlelib.UtilResources.getDimen")
                    }
                    if (newString != null && newString != "")
                        list.set(i, newString)
                    i--
                } else if (str.contains(attr)) {
                    int startIndexOf = str.indexOf(attr)
                    char charAt = str.charAt(startIndexOf - 1)
                    String newString
                    if (charAt == '(') {
                        newString = resourcesID(str, attr, ")", "com.zqy.googlelib.UtilResources.getAttr")
                    } else {
                        newString = resourcesID(str, attr, ";", "com.zqy.googlelib.UtilResources.getAttr")
                    }
                    if (newString != null && newString != "")
                        list.set(i, newString)
                    i--
                } else if (str.contains(bool)) {
                    int startIndexOf = str.indexOf(bool)
                    char charAt = str.charAt(startIndexOf - 1)
                    String newString
                    if (charAt == '(') {
                        newString = resourcesID(str, bool, ")", "com.zqy.googlelib.UtilResources.getBool")
                    } else {
                        newString = resourcesID(str, bool, ";", "com.zqy.googlelib.UtilResources.getBool")
                    }
                    if (newString != null && newString != "")
                        list.set(i, newString)
                    i--
                } else if (str.contains(integer)) {
                    int startIndexOf = str.indexOf(integer)
                    char charAt = str.charAt(startIndexOf - 1)
                    String newString
                    if (charAt == '(') {
                        newString = resourcesID(str, integer, ")", "com.zqy.googlelib.UtilResources.getInteger")
                    } else {
                        newString = resourcesID(str, integer, ";", "com.zqy.googlelib.UtilResources.getInteger")
                    }
                    if (newString != null && newString != "")
                        list.set(i, newString)
                    i--
                } else if (str.contains(interpolator)) {
                    int startIndexOf = str.indexOf(interpolator)
                    char charAt = str.charAt(startIndexOf - 1)
                    String newString
                    if (charAt == '(') {
                        newString = resourcesID(str, interpolator, ")", "com.zqy.googlelib.UtilResources.getInterpolator")
                    } else {
                        newString = resourcesID(str, interpolator, ";", "com.zqy.googlelib.UtilResources.getInterpolator")
                    }
                    if (newString != null && newString != "")
                        list.set(i, newString)
                    i--
                }
            }

            String join = String.join("\n", list)
            file.write(join, 'utf-8')
        }
    }
}


/**
 * 复制源码到临时目录
 */
task copyCoreSource(type: Copy) {
    doFirst {
        println '复制core源码'
    }
    from '../googlelib/src/main/java/com/'
    into 'build/tempsrc/com/'
}
/**
 * 编译class
 */
task compileClass(type: JavaCompile, dependsOn: [assemble_ReplaceR, copyCoreSource]) {
    doFirst {
        println '编译class'
    }
    options.encoding = 'UTF-8'
    source = fileTree(dir: '../googlelib/build/tempsrc/', include: '**/*.java')
    destinationDir = file('build/gen_classs')
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'
    def dependenciesJars = []

//    dependenciesJars.add('../compile_libs/android-support-v4-25.3.1.jar')
//    file('../sboran_common/libs').eachFileRecurse { f ->
//        dependenciesJars.add(f.getAbsolutePath())
//    }

    dependenciesJars.add(androidSdkPath29)
//    dependenciesJars.add(androidSdkPath21)
    classpath = files(dependenciesJars)
}
/**
 * 编译游戏SDK核心jar包（可选中任务名称后右键，Run 'gradle:build6lGameSDKJar'）
 */
task assemble_RJar(type: Jar, dependsOn: compileClass) {

    from 'build/gen_classs/'
    into ''
    // 去掉不需要打包的目录和文件
    // exclude 'BuildConfig.class', 'R.class'
    // 去掉R$开头的文件
    // exclude { it.name.startsWith('R$') }

    noProGuardJarName = "r_${timeStr}"
    // noProGuardJarName = "hjy_sdk_${version}"
    baseName noProGuardJarName

}

/**
 *
 * @param startString 被替换的字符开始符号 比如：R.layout.
 * @param endString 被替换的字符结尾符号
 * @param newStringPrefix 新内容 前缀
 * @return
 */
String resourcesID(src, startString, endString, newStringPrefix) {//无需指定参数类型
    int startIndexOf = src.indexOf(startString)
    int endIndexOf = src.indexOf(endString)
    //资源路劲全称，比如：R.styleable.aa
    String resourcesID = src.substring(startIndexOf, endIndexOf)
    //资源名，比如：aa
    String resourcesName = resourcesID.substring(startString.length(), resourcesID.length())
    if (startString.contains("style")) {
        //style资源特殊处理：比如Base_DialogWindowTitle_AppCompat换成Base.DialogWindowTitle.AppCompat
        //通过name查找资源id，需要原名字
        resourcesName = resourcesName.replaceAll("_", ".")
    }
    String newString = newStringPrefix + "(\"" + resourcesName + "\")"
    return src.replace(resourcesID, newString)
}

dependencies {
    api fileTree(dir: "libs", include: ["*.jar"])
//    implementation "androidx.appcompat:appcompat:1.1.0"
//    implementation "androidx.activity:activity:1.1.0"
//    implementation "androidx.loader:loader:1.1.0"
//    implementation "androidx.viewpager2:viewpager2:1.0.0"
}